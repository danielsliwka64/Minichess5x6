@using MiniChessLogic.Pieces
@using MiniChessLogic.Moves
@using MiniChessLogic
@using System.Drawing
@using StockFishCommunication


@rendermode InteractiveServer


<div class="mainPageContent">
    <h2>State String in FEN notation: {@stateStringFEN}</h2>
    <h2>Best move to play: {@bestMoveToPlay}</h2>
   <div class="boardAndGameOver">
    
        <div class="BoardGrid">


        @for (int i = 0; i < 5; i++)
        {
            int localI = i;
            <div class="row">
            @for (int j = 0; j < 5; j++)
            {
                int localJ = j;
                var piece = gameState.Board[i, j];
        
                <div class="cell @(highlights[i,j] == true? "active":"")" 
                    @onclick="() => Board_MouseDown(localI, localJ) ">
                    @if (piece != null )
                    {
                        <div class="piece @piece.Color @piece.Type @(activePiece == piece && gameOver == false ? "active": "")"
                            @onclick="()=> {activePiece = piece;}">
                        </div>
                    }
                </div>
            }
            </div>
        }
        </div>
        @if (gameOver == true)
        {
            <div class="gameOver">
                <div class="gameOverText">Game Over</div>
                <div class="gameOverWho">@whoWins</div>
                <div class="gameOverReason">@howWins</div>
            </div>
        }
    </div>
    <h3 class="header">MiniChess 5x5 by Daniel, v1.0</h3>
</div>

@code {
    private bool gameOver = false;
    private string whoWins;
    private string howWins;
    private string stateStringFEN;
    private GameState gameState;
    private Result result;
    private Piece activePiece = null;
    private Position selectedPos = null;
    private string bestMoveToPlay = null;

    private readonly Dictionary<Position, Move> moveCache = new Dictionary<Position, Move>();
    private readonly bool[,] highlights = new bool[5, 5];

    protected override void OnInitialized()
    {
        gameState = new GameState(Player.White, Board.Initial());
        gameOver = false;

        CheckTheBestMove();
    }

    private void OnFromPositionSelected(Position pos)
    {
        IEnumerable<Move> moves = gameState.LegalMoveForPiece(pos);
        if (moves.Any())
        {
            selectedPos = pos;
            CacheMoves(moves);
            ShowHighlights();
        }
    }
    private void OnToPositionSelected(Position pos)
    {
        selectedPos = null;
        HideHighlights();
        if (moveCache.TryGetValue(pos, out Move move))
        {
            HandleMove(move);
        }
    }
    private void HandleMove(Move move)
    {
        gameState.MakeMove(move);

        CheckTheBestMove();

        if (gameState.IsGameOver())
        {
            ShowGameOver();
        }
    }
    private void ShowGameOver()
    {
        gameOver = true;
        result = gameState.Result;
        whoWins = GetWinnerText(result.Winner);
        howWins = GetReasonText(result.Reason, gameState.CurrentPlayer);
    }
    private void Board_MouseDown(int col, int row)
    {
        if (activePiece == null)
        {
            return;
        }

        Position pos = GetCoordinates(col, row);

        if (selectedPos == null)
        {
            OnFromPositionSelected(pos);
        }
        else
        {
            OnToPositionSelected(pos);
        }

    }
    private Position GetCoordinates(int x, int y)
    {

        return new Position(x, y);
    }
    private void CacheMoves(IEnumerable<Move> moves)
    {
        moveCache.Clear();

        foreach (Move move in moves)
        {
            moveCache[move.ToPos] = move;
        }
    }
    private void ShowHighlights()
    {
        foreach (Position to in moveCache.Keys)
        {
            highlights[to.Row, to.Column] = true;
        }
    }
    private void HideHighlights()
    {
        foreach (Position to in moveCache.Keys)
        {
            highlights[to.Row, to.Column] = false;
        }
    }
    private static string GetWinnerText(Player winner)
    {
        return winner switch
        {
            Player.White => "WHITE WINS!",
            Player.Black => "BLACK WINS!",
            _ => "IT'S A DRAW"

        };
    }
    private static string GetReasonText(EndReason reason, Player currentPlayer)
    {
        return reason switch
        {
            EndReason.Stalemate => $"STALEMATE - {PlayerString(currentPlayer)} CANT't MOVE",
            EndReason.Chekmate => $"CHECKMATE - {PlayerString(currentPlayer)} CAN'T MOVE",
            EndReason.FiftyMoveRule => $"FIFTY-MOVE RULE",
            EndReason.InsufficientMaterial => $"INSUFFICIENT MATERIAL",
            EndReason.ThreefoldRepetition => $"THREEFOLD REPETITION",
            _ => ""
        };
    }
    private static string PlayerString(Player player)
    {
        return player switch
        {
            Player.White => "WHITE",
            Player.Black => "BLACK",
            _ => ""
        };
    }
    private void CheckTheBestMove()
    {
        stateStringFEN = gameState.stateString;

        StockFishService.examplePosition = stateStringFEN;
        StockFishService.OnInitializedAsync();
        bestMoveToPlay = StockFishService.bestMove;
    }
}

